version: '3.9'

services:
  broker:
    image: rabbitmq:3.11.2
    container_name: broker
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - broker:/var/lib/rabbitmq/
      - broker:/var/log/rabbitmq
    ports:
      - ${BROKER_ADMIN_PORT}:15672
      - ${BROKER_PORT}:5672

  calendar:
    build:
      context: ./..
      dockerfile: ./build/Dockerfile
      args:
        BIN_FILE: "/opt/calendar/calendar-app"
        APP_FOLDER: "calendar"
        CONFIG_FILE_EXTERNAL: "./configs/calendar_config.toml"
    container_name: calendar
    environment:
      STORAGE_DSN : "host=db port=$DB_PORT user=$DB_USER password=$DB_PASSWORD dbname=$DB_NAME sslmode=disable"
    ports:
      - ${HTTP_PORT}:8888
      - ${GRPC_PORT}:8889
    depends_on:
      db:
        condition: service_healthy

  calendar_scheduler:
    container_name: calendar_scheduler
    build:
      context: ./..
      dockerfile: ./build/Dockerfile
      args:
        BIN_FILE: "/opt/calendar/scheduler-app"
        APP_FOLDER: "calendar_scheduler"
        CONFIG_FILE_EXTERNAL: "./configs/scheduler_config.toml"
    environment:
      STORAGE_DSN : "host=db port=$DB_PORT user=$DB_USER password=$DB_PASSWORD dbname=$DB_NAME sslmode=disable"
      PUBLISHER_DSN : "amqp://guest:guest@broker:5672"
    depends_on:
      broker:
        condition: service_healthy

  calendar_sender:
    container_name: calendar_sender
    build:
      context: ./..
      dockerfile: ./build/Dockerfile
      args:
        BIN_FILE: "/opt/calendar/sender-app"
        APP_FOLDER: "calendar_sender"
        CONFIG_FILE_EXTERNAL: "./configs/sender_config.toml"
    environment:
      CONSUMER_DSN: "amqp://guest:guest@broker:5672"
    depends_on:
      broker:
        condition: service_healthy

  db:
    image: postgres:${DB_VERSION}
    container_name: db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

  migration:
    container_name: migration
    build:
      context: ./..
      dockerfile: ./build/migration/Dockerfile
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: "host=db port=$DB_PORT user=$DB_USER password=$DB_PASSWORD dbname=$DB_NAME sslmode=disable"
    volumes:
      - "../migrations:/migrations"
    depends_on:
      db:
        condition: service_healthy

  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - db

volumes:
  broker:
  postgres-data:
    name: postgres_data

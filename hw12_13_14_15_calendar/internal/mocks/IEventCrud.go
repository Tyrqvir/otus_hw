// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Tyrqvir/otus_hw/hw12_13_14_15_calendar/internal/storage/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IEventCrud is an autogenerated mock type for the IEventCrud type
type IEventCrud struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, event
func (_m *IEventCrud) CreateEvent(ctx context.Context, event model.Event) (int64, error) {
	ret := _m.Called(ctx, event)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) int64); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: ctx, id
func (_m *IEventCrud) DeleteEvent(ctx context.Context, id model.EventID) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventsByPeriodForOwner provides a mock function with given fields: ctx, ownerID, start, end
func (_m *IEventCrud) EventsByPeriodForOwner(ctx context.Context, ownerID model.OwnerID, start time.Time, end time.Time) ([]model.Event, error) {
	ret := _m.Called(ctx, ownerID, start, end)

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func(context.Context, model.OwnerID, time.Time, time.Time) []model.Event); ok {
		r0 = rf(ctx, ownerID, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.OwnerID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, ownerID, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *IEventCrud) UpdateEvent(ctx context.Context, event model.Event) (int64, error) {
	ret := _m.Called(ctx, event)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) int64); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIEventCrud interface {
	mock.TestingT
	Cleanup(func())
}

// NewIEventCrud creates a new instance of IEventCrud. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIEventCrud(t mockConstructorTestingTNewIEventCrud) *IEventCrud {
	mock := &IEventCrud{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
